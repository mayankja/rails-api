require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
     { user_id: "123456", first_name: "test_first1", last_name: "test_last1", email: "test@test.com", email_notifications_opt: "123454678", cell_phone: "123456789",
      sms_notifications_opt: "123456789", password: "12345678", password_confirmation: "12345678", enabled: "true" }
  }

  let(:invalid_attributes) {
    {"first_name"=>"test_first1"}
  }

  before do 
    request.headers["token"] = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE0NjA2NTgxODZ9"
  end
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  
  # Test Rest Api with CURD 
  let(:valid_session) { {} }
  describe "GET #index" do
    it "assigns all users as @users" do
      user = User.create! valid_attributes
      get :index, params: {}
      expect(assigns(:users)).to eq([user])
    end
  end

  describe "GET #show" do
    it "assigns the requested user as @user" do
      user = User.create! valid_attributes
      get :show, params: {id: user.to_param}
      expect(assigns(:user)).to eq(user)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new User" do
        expect {
          post :create, params: {user: valid_attributes}
        }.to change(User, :count).by(1)
      end

      it "assigns a newly created user as @user" do
        post :create, params: {user: valid_attributes}
        expect(assigns(:user)).to be_a(User)
        expect(assigns(:user)).to be_persisted
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved user as @user" do
        post :create, params: {user: invalid_attributes}
        expect(assigns(:user)).to be_a_new(User)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
         { user_id: "123456", first_name: "test_first2", last_name: "test_last2", email: "test@test.com", email_notifications_opt: "123454678", cell_phone: "123456789",
          sms_notifications_opt: "123456789", password: "12345678", password_confirmation: "12345678", enabled: "true"}
      }

      it "updates the requested user" do
        user = User.create! valid_attributes
        put :update, params: {id: user.to_param, user: new_attributes}
        user.reload
        expect(user.first_name).to eq("test_first2")
      end

      it "assigns the requested user as @user" do
        user = User.create! valid_attributes
        put :update, params: {id: user.to_param, user: valid_attributes}
        expect(assigns(:user)).to eq(user)
      end
    end

    context "with invalid params" do
      it "assigns the user as @user" do
        user = User.create! valid_attributes
        put :update, params: {id: user.to_param, user: invalid_attributes}
        expect(assigns(:user)).to eq(user)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested user" do
      user = User.create! valid_attributes
      expect {
        delete :destroy, params: {id: user.to_param}
      }.to change(User, :count).by(-1)
    end
  end
  
  # Test Api for Forgot Password and Reset Password  
  describe "GET #forgot_password" do
    it "forgot password the requested user" do
      user = User.create! valid_attributes
      get :forgot_password, params: {user: {email: user.email, user_id: user.user_id}}
      response.should be_successful
    end
  end

  describe "GET #reset_password" do
    it "reset password the requested user" do
      user = User.create! valid_attributes
      user.forgot_password_with_email
      get :reset_password, params: {user: {email: user.email, user_id: user.user_id,old_password: user.reset_password_token,
         password: "1234567890", password_confirmation: "1234567890" }}
      response.should be_successful
      user.reload
      expect(user.password).to eq("1234567890")
    end
  end
end
